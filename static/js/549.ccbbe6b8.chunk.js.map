{"version":3,"file":"static/js/549.ccbbe6b8.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactListItem/ContactListItem.module.css","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js","pages/Pages.module.css"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","  export const getContacts = state => state.contacts.contacts;\n  export const getFilter = state => state.filter;","import css from 'components/ContactForm/ContactForm.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact, fetchContacts } from '../../redux/operations';\nimport { getContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleAddContact = (name, number) => {\n    let contactExisting = contacts.find(item => item.name === name);\n    if (contactExisting) {\n      return alert(`${name} is already in contacts`);\n    }\n    const newUser = { name, number, id: nanoid() };\n    dispatch(addContact(newUser));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleAddContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.contactForm} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        <p>Name</p>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={css.label}>\n        <p>Number</p>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsFilter\":\"Filter_contactsFilter__r518r\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport css from 'components/Filter/Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n  return (\n    <div className={css.contactsFilter}>\n      <title className={css.filterTitle}>Find contacts by name</title>\n      <input\n        className={css.input}\n        name=\"filter\"\n        type=\"text\"\n        placeholder=\"search...\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleFilter}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"btn\":\"ContactList_btn__6Piat\",\"item\":\"ContactList_item__EZYHO\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport css from 'components/ContactListItem/ContactListItem.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function ContactListItem({ name, number }) {\n  return (\n    <div className={css.contactItem}>\n      <p className={css.name}>{name} :</p>\n      <p className={css.number}>{number}</p>\n    </div>\n  );\n}\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from '../../redux/selectors';\nimport { deleteContact } from '../../redux/operations';\nimport css from './ContactList.module.css';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const contactSearch = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul className={css.list}>\n      {contactSearch.map(({ name, number, id }) => (\n        <li className={css.user} key={id}>\n          <ContactListItem name={name} number={number} />\n          <button className={css.btn} onClick={() => handleDeleteContact(id)}>\n            remove\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\nimport { useDispatch } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport css from './Pages.module.css';\n\n const Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h2 className={css.title}>Contacts</h2>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","getContacts","state","contacts","getFilter","filter","ContactForm","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","useEffect","fetchContacts","handleChange","e","target","value","className","css","onSubmit","preventDefault","find","item","alert","newUser","addContact","handleAddContact","type","pattern","title","required","onChange","Filter","placeholder","setFilter","ContactListItem","contactSearch","toLowerCase","includes","map","onClick","deleteContact","handleDeleteContact"],"sourceRoot":""}